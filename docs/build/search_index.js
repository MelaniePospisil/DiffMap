var documenterSearchIndex = {"docs":
[{"location":"#diffmap.jl-Documentation","page":"diffmap.jl Documentation","title":"diffmap.jl Documentation","text":"","category":"section"},{"location":"","page":"diffmap.jl Documentation","title":"diffmap.jl Documentation","text":"DiffusionMaps.DiffMap\nfit\nprojection\npredict\nDiffusionMaps.metric\nDiffusionMaps.kernel\nDiffusionMaps.size\nindim\noutdim\neigvals\neigvecs\nDiffusionMaps.normalize_laplacian\nDiffusionMaps.normalize_direction!\nDiffusionMaps.DiffMetric","category":"page"},{"location":"#Main.DiffusionMaps.DiffMap","page":"diffmap.jl Documentation","title":"Main.DiffusionMaps.DiffMap","text":"DiffMap{T <: Real} <: NonlinearDimensionalityReduction\n\nThe DiffMap type represents diffusion maps model constructed for T type data. It stores all the relevant information for the reduction.\n\n\n\n\n\n","category":"type"},{"location":"#StatsAPI.fit","page":"diffmap.jl Documentation","title":"StatsAPI.fit","text":"fit(::Type{DiffMap}, X::AbstractMatrix; \n    metric::PreMetric=DiffMetric(1.0), \n    maxoutdim::Int=2,\n    ɛ::Real=1.0, \n    α::Real=0.5,\n    t::Int=1)::DiffMap\n\nFit a DiffMap model to X using the specified parameters.\n\nArguments\n\n::Type{DiffMap}: Type of the DiffMap model.\nX::AbstractMatrix: Data matrix of observations. Each row of X is an observation.\n\nKeyword arguments\n\nmetric::PreMetric: The metric used for computing the distance matrix.   Default: DiffMetric(1.0)\nmaxoutdim::Int: The dimension of the reduced space.   Default: 2\nɛ::Real: The scale parameter for the Gaussian kernel.   Default: 1.0\nα::Real: A normalization parameter.   Default: 0.5\nt::Int: The number of transitions.   Default: 1\n\nReturns\n\nDiffMap: A DiffMap object representing the fitted model.\n\nExamples\n\nX = rand(100, 3)            # toy data set, 100 observations with 3 features model = fit(DiffMap, X)     # construct a DiffMap model R = projection(model)       # Obtain the lower dimensional embedding\n\n\n\n\n\n","category":"function"},{"location":"#MultivariateStats.projection","page":"diffmap.jl Documentation","title":"MultivariateStats.projection","text":"projection(M::DiffMap)\n\nReturns the lower-dimensional embeddings of the input data. The format (rows = features or rows = observations) corresponds to the input format.\n\nArguments\n\nM::DiffMap: The diffusion map model obtained from fitting.\n\n\n\n\n\n","category":"function"},{"location":"#StatsAPI.predict","page":"diffmap.jl Documentation","title":"StatsAPI.predict","text":"Embed new points into the reduced-dimensional space.\n\nArguments\n\nmodel::DiffMap: The diffusion map model obtained from fitting.\nnew_points::AbstractMatrix: The new points to be embedded.\nk::Int = 10: The number of nearest neighbors to consider.\n\nThis function embeds new points into the reduced-dimensional space of a DiffMap model.  It therefore calculates the k nearest neigbours in the model's input data X  and gives back the weightet average of their lower-dimensional embeddings.\n\nReturns\n\nAn array containing the embedded representation of the new points.\n\nNote\n\nIf the dimension of new_points is different from the dimension of the training data, a dimension mismatch error is raised.\n\nThe \"newpoints\" are not added to the model. The model stays unchanged.  To alter the model and add the new points, consider calculating a new DiffMap model with  newdata = hcat(model.X, newpoints) newmodel = fit(DiffMap, new_data)\n\n\n\n\n\n","category":"function"},{"location":"#Main.DiffusionMaps.metric","page":"diffmap.jl Documentation","title":"Main.DiffusionMaps.metric","text":"metric(M)\n\nReturns the metric used to calculate the kernel matrix of the model M.  Defaults to the here defined DiffMetric.\n\n\n\n\n\n","category":"function"},{"location":"#Main.DiffusionMaps.kernel","page":"diffmap.jl Documentation","title":"Main.DiffusionMaps.kernel","text":"kernel(M)\n\nReturns the kernel matrix of the model M.  This is the normalized and symmetric distance matrix. The distance is calculated with the metric function. Call metric(M) to display the model's metric function.\n\n\n\n\n\n","category":"function"},{"location":"#Base.size","page":"diffmap.jl Documentation","title":"Base.size","text":"size(M)\n\nReturns a tuple with the dimensions of the reduced output (=d) and obervations (=the number of columns of the initial input).\n\n\n\n\n\n","category":"function"},{"location":"#MultivariateStats.indim","page":"diffmap.jl Documentation","title":"MultivariateStats.indim","text":"indim(M)\n\nReturns the input dimensions of the model.\n\n\n\n\n\n","category":"function"},{"location":"#MultivariateStats.outdim","page":"diffmap.jl Documentation","title":"MultivariateStats.outdim","text":"outdim(M)\n\nReturns the output dimensions of the model.\n\n\n\n\n\n","category":"function"},{"location":"#LinearAlgebra.eigvals","page":"diffmap.jl Documentation","title":"LinearAlgebra.eigvals","text":"eigvals(M)\n\nReturn eigenvalues of the kernel matrix of the model M.\n\n\n\n\n\n","category":"function"},{"location":"#LinearAlgebra.eigvecs","page":"diffmap.jl Documentation","title":"LinearAlgebra.eigvecs","text":"eigvecs(M)\n\nReturn eigenvectors of the kernel matrix of the model M.\n\n\n\n\n\n","category":"function"},{"location":"#Main.DiffusionMaps.normalize_laplacian","page":"diffmap.jl Documentation","title":"Main.DiffusionMaps.normalize_laplacian","text":"normalize_laplacian(A::AbstractMatrix, α::Real)\n\nHelper function within fit. Normalize the Laplacian matrix A using a power normalization factor α.\n\nArguments\n\nA::AbstractMatrix: The Laplacian matrix to be normalized.\nα::Real: The power normalization factor.\n\nReturns\n\nres::AbstractMatrix: The normalized Laplacian matrix.\n\nThis function computes the normalized Laplacian matrix by applying a power  normalization factor α to the input matrix A. \n\nIt first constructs a diagonal matrix D by summing the rows of A and  placing the resulting sums on the diagonal. \n\nThen, it applies the power normalization operation D^(-α) * A * D^(-α)  to obtain the normalized Laplacian matrix.\n\n\n\n\n\n","category":"function"},{"location":"#Main.DiffusionMaps.normalize_direction!","page":"diffmap.jl Documentation","title":"Main.DiffusionMaps.normalize_direction!","text":"normalize_direction!(A::AbstractMatrix)\n\nHelper function within fit. Adjust the direction of columns in the matrix A.\n\nArguments\n\nA::AbstractMatrix: The matrix whose column directions need to be normalized.\n\nThis function adjusts the direction of each column in the matrix A.  It iterates over the columns of A and checks if the first element of  each column is negative. If so, it flips the sign of all elements in that column,  effectively normalizing its direction. This makes sure, that the fitting of the same data has the same  lower dimensional embedding and doesn't differ because of the eigenvector's sign.\n\nNote: This function modifies the input matrix A in place.\n\n\n\n\n\n","category":"function"},{"location":"#Main.DiffusionMaps.DiffMetric","page":"diffmap.jl Documentation","title":"Main.DiffusionMaps.DiffMetric","text":"Structure for the here used distance function\n\n\n\n\n\n","category":"type"},{"location":"diffmap/#Diffusion-Maps","page":"Diffusion Maps","title":"Diffusion Maps","text":"","category":"section"},{"location":"diffmap/","page":"Diffusion Maps","title":"Diffusion Maps","text":"Add: a part where \"what are diffusion maps\" is described in two sentences","category":"page"},{"location":"diffmap/#Properties","page":"Diffusion Maps","title":"Properties","text":"","category":"section"},{"location":"diffmap/","page":"Diffusion Maps","title":"Diffusion Maps","text":"size(M): Returns a tuple with the dimensions of the reduced output (=d) and observations (=the number of columns of the initial input).","category":"page"},{"location":"diffmap/","page":"Diffusion Maps","title":"Diffusion Maps","text":"indim(M): Returns the input dimensions of the model.","category":"page"},{"location":"diffmap/","page":"Diffusion Maps","title":"Diffusion Maps","text":"outdim(M): Returns the output dimensions of the model.","category":"page"},{"location":"diffmap/","page":"Diffusion Maps","title":"Diffusion Maps","text":"eigvals(M): Return eigenvalues of the kernel matrix of the model M.","category":"page"},{"location":"diffmap/","page":"Diffusion Maps","title":"Diffusion Maps","text":"eigvecs(M): Return eigenvectors of the kernel matrix of the model M.","category":"page"},{"location":"diffmap/","page":"Diffusion Maps","title":"Diffusion Maps","text":"metric(M): Returns the metric used to calculate the kernel matrix of the model M. Defaults to the here defined DiffMetric.","category":"page"},{"location":"diffmap/","page":"Diffusion Maps","title":"Diffusion Maps","text":"kernel(M): Returns the kernel matrix of the model M. This is the normalized and symmetric distance matrix. The distance is calculated with the metric function.","category":"page"},{"location":"diffmap/#Functions","page":"Diffusion Maps","title":"Functions","text":"","category":"section"},{"location":"diffmap/","page":"Diffusion Maps","title":"Diffusion Maps","text":"fit(::Type{DiffMap}, X::AbstractMatrix; metric::PreMetric=DiffMetric(1.0), maxoutdim::Int=2, ɛ::Real=1.0, α::Real=0.5, t::Int=1)::DiffMap: Fit a DiffMap model to X using the specified parameters.","category":"page"},{"location":"diffmap/","page":"Diffusion Maps","title":"Diffusion Maps","text":"predict(model::DiffMap, new_points::AbstractMatrix, k::Int = 10): Embed new points into the reduced-dimensional space.","category":"page"},{"location":"diffmap/","page":"Diffusion Maps","title":"Diffusion Maps","text":"normalizelaplacian(A::AbstractMatrix, α::Real): Normalize the Laplacian matrix A using a power normalization factor α. normalizedirection!(A::AbstractMatrix): Adjust the direction of columns in the matrix A. show(io::IO, M::DiffMap): Show the DiffMap model M. predict(model::DiffMap, new_points::AbstractMatrix, k::Int = 10): Embed new points into the reduced-dimensional space.","category":"page"}]
}
